{
    "sourceFile": "contracts/StudentMgt.sol",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1711356475722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1711356493183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n         return students[_studentId].assessmentsPassed[_assessmentId];\n     }\n }\n \n-pragma solidity ^0.8.20;\n+pragma solidity ^0.8.;\n import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n     contract myToken is ERC20 {\n         constructor(uint256 initialSupply) ERC20(\"MyToken\", \"MTK\") {\n             _mint(msg.sender, initialSupply * 10**18);\n"
                },
                {
                    "date": 1711356518824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n         return students[_studentId].assessmentsPassed[_assessmentId];\n     }\n }\n \n-pragma solidity ^0.8.;\n+pragma solidity ^0.8.20;\n import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n     contract myToken is ERC20 {\n         constructor(uint256 initialSupply) ERC20(\"MyToken\", \"MTK\") {\n             _mint(msg.sender, initialSupply * 10**18);\n"
                },
                {
                    "date": 1711356564927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n }\n \n pragma solidity ^0.8.20;\n import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n-    contract myToken is ERC20 {\n+contract myToken is ERC20 {\n         constructor(uint256 initialSupply) ERC20(\"MyToken\", \"MTK\") {\n             _mint(msg.sender, initialSupply * 10**18);\n         }\n \n"
                },
                {
                    "date": 1711356573065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,11 +83,11 @@\n \n pragma solidity ^0.8.20;\n import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n contract myToken is ERC20 {\n-        constructor(uint256 initialSupply) ERC20(\"MyToken\", \"MTK\") {\n-            _mint(msg.sender, initialSupply * 10**18);\n-        }\n+    constructor(uint256 initialSupply) ERC20(\"MyToken\", \"MTK\") {\n+        _mint(msg.sender, initialSupply * 10**18);\n+    }\n \n             function transferTokens(address receiver, uint256 amount) external {\n                 require(amount > 0, \"Amount must be greater than 0\"); // Check if the amount is greater than 0\n                 require(balanceOf(msg.sender) >= amount, \"Insufficient balance\"); // Check if sender has enough balance\n"
                },
                {
                    "date": 1711356580575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,10 +87,10 @@\n     constructor(uint256 initialSupply) ERC20(\"MyToken\", \"MTK\") {\n         _mint(msg.sender, initialSupply * 10**18);\n     }\n \n-            function transferTokens(address receiver, uint256 amount) external {\n-                require(amount > 0, \"Amount must be greater than 0\"); // Check if the amount is greater than 0\n+        function transferTokens(address receiver, uint256 amount) external {\n+            require(amount > 0, \"Amount must be greater than 0\"); // Check if the amount is greater than 0\n                 require(balanceOf(msg.sender) >= amount, \"Insufficient balance\"); // Check if sender has enough balance\n                 \n                 _transfer(msg.sender, receiver, amount); // Transfer tokens from sender to receiver\n \n"
                },
                {
                    "date": 1711356591250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,11 +89,11 @@\n     }\n \n         function transferTokens(address receiver, uint256 amount) external {\n             require(amount > 0, \"Amount must be greater than 0\"); // Check if the amount is greater than 0\n-                require(balanceOf(msg.sender) >= amount, \"Insufficient balance\"); // Check if sender has enough balance\n+            require(balanceOf(msg.sender) >= amount, \"Insufficient balance\"); // Check if sender has enough balance\n                 \n-                _transfer(msg.sender, receiver, amount); // Transfer tokens from sender to receiver\n+            _transfer(msg.sender, receiver, amount); // Transfer tokens from sender to receiver\n \n                 // Optionally, emit an event to log the transfer\n                 emit Transfer(msg.sender, receiver, amount);\n             }  \n"
                },
                {
                    "date": 1711356598058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,8 +94,8 @@\n                 \n             _transfer(msg.sender, receiver, amount); // Transfer tokens from sender to receiver\n \n                 // Optionally, emit an event to log the transfer\n-                emit Transfer(msg.sender, receiver, amount);\n+            emit Transfer(msg.sender, receiver, amount);\n             }  \n \n }\n"
                },
                {
                    "date": 1711356656749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,7 +95,7 @@\n             _transfer(msg.sender, receiver, amount); // Transfer tokens from sender to receiver\n \n                 // Optionally, emit an event to log the transfer\n             emit Transfer(msg.sender, receiver, amount);\n-            }  \n+        }  \n \n }\n"
                },
                {
                    "date": 1711356754992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n         return students[_studentId].assessmentsPassed[_assessmentId];\n     }\n }\n \n-pragma solidity ^0.8.20;\n+pragma solidity ^0.8.19;\n import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n contract myToken is ERC20 {\n     constructor(uint256 initialSupply) ERC20(\"MyToken\", \"MTK\") {\n         _mint(msg.sender, initialSupply * 10**18);\n"
                }
            ],
            "date": 1711356475722,
            "name": "Commit-0",
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract StudentManagement {\n    \n    struct Student {\n        uint256 studentId;\n        string name;\n        mapping(uint256 => bool) enrolledCourses;\n        mapping(uint256 => bool) assessmentsPassed;\n    }\n\n\n    struct Course {\n    uint256 courseId;\n    string courseName;\n    uint256 passMark; // Pass mark out of 100\n    mapping(uint256 => bool) assessments;\n    }\n    \n    \n    mapping(uint256 => Student) public students;\n    mapping(uint256 => Course) public courses;\n    \n    uint256 public lastStudentId;\n    uint256 public lastCourseId;\n    \n    event StudentEnrolled(uint256 studentId, string name, uint256 courseId);\n    event StudentAssessmentTaken(uint256 studentId, uint256 courseId, bool passed);\n    \n    constructor() {\n        lastStudentId = 0;\n        lastCourseId = 0;\n    }\n    \n    \n    function enrollStudent(string memory _name) external {\n        lastStudentId++;\n        Student storage newStudent = students[lastStudentId];\n        newStudent.studentId = lastStudentId;\n        newStudent.name = _name;\n    }\n    \n    function createCourse(string memory _courseName, uint256 _passMark) external {\n        lastCourseId++;\n        // courses[lastCourseId] = Course(lastCourseId, _courseName, _passMark, assessments);\n        courses[lastCourseId].courseId = lastCourseId;\n        courses[lastCourseId].courseName = _courseName;\n        courses[lastCourseId].passMark = _passMark;\n    }\n\n    function enrollStudentInCourse(uint256 _studentId, uint256 _courseId) external {\n        require(students[_studentId].studentId != 0, \"Student does not exist\");\n        require(courses[_courseId].courseId != 0, \"Course does not exist\");\n        \n        students[_studentId].enrolledCourses[_courseId] = true;\n        emit StudentEnrolled(_studentId, students[_studentId].name, _courseId);\n    }\n    \n    function takeAssessment(uint256 _studentId, uint256 _courseId, uint256 _assessmentId, uint256 _score) external {\n        require(students[_studentId].studentId != 0, \"Student does not exist\");\n        require(courses[_courseId].courseId != 0, \"Course does not exist\");\n        require(_score >= 0 && _score <= 100, \"Invalid score\");\n        \n        if (_score >= courses[_courseId].passMark) {\n            students[_studentId].assessmentsPassed[_assessmentId] = true;\n            emit StudentAssessmentTaken(_studentId, _courseId, true);\n        } else {\n            students[_studentId].assessmentsPassed[_assessmentId] = false;\n            emit StudentAssessmentTaken(_studentId, _courseId, false);\n        }\n        \n          courses[_courseId].assessments[_assessmentId] = true;\n    }\n    \n    function verifyAssessment(uint256 _studentId, uint256 _courseId, uint256 _assessmentId) external view returns (bool) {\n        require(students[_studentId].studentId != 0, \"Student does not exist\");\n        require(courses[_courseId].courseId != 0, \"Course does not exist\");\n        \n        return students[_studentId].assessmentsPassed[_assessmentId];\n    }\n}\n\npragma solidity ^0.8.20;\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n    contract myToken is ERC20 {\n        constructor(uint256 initialSupply) ERC20(\"MyToken\", \"MTK\") {\n            _mint(msg.sender, initialSupply * 10**18);\n        }\n\n            function transferTokens(address receiver, uint256 amount) external {\n                require(amount > 0, \"Amount must be greater than 0\"); // Check if the amount is greater than 0\n                require(balanceOf(msg.sender) >= amount, \"Insufficient balance\"); // Check if sender has enough balance\n                \n                _transfer(msg.sender, receiver, amount); // Transfer tokens from sender to receiver\n\n                // Optionally, emit an event to log the transfer\n                emit Transfer(msg.sender, receiver, amount);\n            }  \n\n}\n"
        }
    ]
}